package Parse;

action code {:
  static Symbol.Symbol sym(String s) {
    return Symbol.Symbol.symbol(s);
  }
:};

parser code {:
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg = err;
    lexer = l;
  }
:};

scan with {:
  return lexer.nextToken();
:};

/* Terminal Declarations */
terminal String ID, STRING_LITERAL;
terminal Integer DECIMAL_LITERAL;
terminal char CHAR_LITERAL;
terminal INT, COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK,
         LBRACE, RBRACE, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE,
         GT, GE, AND, OR, ASSIGN, IF, ELSE, WHILE, FOR, DO, BREAK, FUN,
         VAR, VOLATILE, REGISTER, CONTINUE, TYPEDEF, STRUCT, STATIC, SIZEOF,
         RETURN, EXTERN, DOUBLE, UNION, SHORT, FLOAT, CONST, VOID, LONG, GOTO,
         ENUM, CHAR, AUTO, RSHIFTASSIGN, LSHIFTASSIGN, ELIPSES, BWISEORASSIGN,
         BWISEXORASSIGN, RSHIFT, LSHIFT, DIVASSIGN, ARROW, SUBASSIGN, DECREMENT,
         ADDASSIGN, INCREMENT, MULASSIGN, BWISEANDASSIGN, MODASSIGN, TILDE,
         BWISEOR, BWISEXOR, PERIOD, BITWISEAND, MODULUS;

/* Nonterminal Declarations from the .md file */
non terminal declaration;
non terminal name;
non terminal bitfield_list;
non terminal bitfield_value;
non terminal empty_array_type_list;
non terminal empty_array_type;
non terminal expression_array_type_list;
non terminal expression_array_type;
non terminal type;
non terminal type_augments;
non terminal brackets_list;
non terminal pointer_list;
non terminal type_name;
non terminal initialization;
non terminal struct_or_union_declarator;
non terminal enumerator_list;
non terminal enumerator;
non terminal struct_declaration_list;
non terminal struct_or_union;
non terminal type_parameters;
non terminal parameters;
non terminal parameter_list;
non terminal parameter_type_list;
non terminal initializer_list;
non terminal initializer;
non terminal constant_expression;
non terminal compound_statement;
non terminal assignment_expression;

/* Set the start symbol to declaration */
start with declaration;

%%

/* Grammar Productions from the .md file */

/* Declaration productions */
declaration ::=
      VAR bitfield_list type name initialization SEMICOLON
    | FUN bitfield_list type name parameters compound_statement
    | FUN bitfield_list type name type_parameters SEMICOLON
    | TYPEDEF type name SEMICOLON
    | bitfield_list struct_or_union name struct_or_union_declarator
    | ENUM ID LBRACE enumerator_list RBRACE
    ;

name ::=
      ID
    ;

bitfield_list ::=
      /* empty */
    | bitfield_value bitfield_list
    ;

bitfield_value ::=
      CONST
    | VOLATILE
    | EXTERN
    | STATIC
    | AUTO
    | REGISTER
    ;

empty_array_type_list ::=
      empty_array_type
    | empty_array_type_list empty_array_type
    ;

empty_array_type ::=
      LBRACK RBRACK
    ;

expression_array_type_list ::=
      expression_array_type
    | expression_array_type_list expression_array_type
    ;

expression_array_type ::=
      LBRACK constant_expression RBRACK
    ;

type ::=
      type_name type_augments
    | type_name
    ;

type_augments ::=
      pointer_list
    | brackets_list
    | pointer_list brackets_list
    ;

brackets_list ::=
      empty_array_type_list
    | expression_array_type_list
    ;

pointer_list ::=
      TIMES
    | pointer_list TIMES
    ;

type_name ::=
      VOID
    | CHAR
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    | ENUM ID
    | ID
    ;

initialization ::=
      ASSIGN initializer
    ;

struct_or_union_declarator ::=
      LBRACE struct_declaration_list RBRACE
    ;

enumerator_list ::=
      enumerator
    | enumerator_list COMMA enumerator
    ;

enumerator ::=
      ID
    | ID ASSIGN constant_expression
    ;

struct_declaration_list ::=
      type name SEMICOLON
    | struct_declaration_list type name SEMICOLON
    ;

struct_or_union ::=
      STRUCT
    | UNION
    ;

type_parameters ::=
      LPAREN parameter_type_list RPAREN
    | LPAREN parameter_type_list COMMA ELIPSES RPAREN
    | LPAREN RPAREN
    ;

parameters ::=
      LPAREN parameter_list RPAREN
    | LPAREN parameter_list COMMA ELIPSES RPAREN
    | LPAREN RPAREN
    ;

parameter_list ::=
      type name
    | parameter_list COMMA type name
    ;

parameter_type_list ::=
      type
    | parameter_type_list COMMA type
    ;

initializer_list ::=
      initializer
    | initializer_list COMMA initializer
    ;

initializer ::=
      assignment_expression
    | LBRACE initializer_list RBRACE
    ;

/* Placeholder productions for the remaining nonterminals */
constant_expression ::=
      DECIMAL_LITERAL
    | ID
    ;

compound_statement ::=
      LBRACE RBRACE
    ;

assignment_expression ::=
      ID ASSIGN DECIMAL_LITERAL
    ;